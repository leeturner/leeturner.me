<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lee Turner</title>
    <link>http://leeturner.me</link>
    <atom:link href="http://leeturner.me/feed.xml" rel="self" type="application/rss+xml" />
    <description>Welcome to the website of Lee Turner</description>
    <language>en-US</language>
    <pubDate>Sun, 10 Feb 2019 22:40:46 +0000</pubDate>
    <lastBuildDate>Sun, 10 Feb 2019 22:40:46 +0000</lastBuildDate>

    <item>
      <title>Building a Camel Case @DisplayNameGenerator For JUnit 5</title>
      <link>http://leeturner.me/blog/2019/02/building-a-camel-case-junit5-displaynamegenerator.html</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2019/02/building-a-camel-case-junit5-displaynamegenerator.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think it is fair to say that &lt;a href=&quot;https://junit.org&quot;&gt;JUnit&lt;/a&gt; has been my go to unit testing framework for quite a while.  I have used &lt;a href=&quot;https://testng.org/&quot;&gt;TestNG&lt;/a&gt; on some pretty major projects where it was already in use (and it has some awesome features) but if I am building something from scratch, I will most likely reach for the JUnit maven dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was solidified even further with the release of JUnit 5.  I won&amp;#8217;t go into any detail here of what the major differences are between version 4 and 5 because there are loads of great articles on the web about this already.  However, some of my favourites are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;New asserts - especially assertThrows()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assumptions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More readable test descriptions with the @DisplayName annotation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tags&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parameterised Tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic Tests (although I need to delve into this one a little more)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the_displayname_annotation&quot;&gt;The @DisplayName Annotation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@DisplayName&lt;/code&gt; annotation seemed like a great idea - you add the annotation with a more readable description to your test class or methods and that gets displayed instead of the default class or method name in your test runner.  Something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@DisplayName(&quot;Tests that when updating your password, the two passwords submitted must match&quot;)
@Test
public void testWhenAnUpdatePasswordRequestIsSubmittedTheTwoPasswordsMustMatch{} {
	// test goes here
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was fun for a while but it quickly became a lot of work to write and keep updated - especially when you like to write descriptive test method names.  It just seemed like unnecessary duplication.  However, all of this might change with the latest JUnit 5.4 release and the new &lt;code&gt;@DisplayNameGenerator&lt;/code&gt; API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you follow along on Twitter, you will have heard of the new &lt;code&gt;@DisplayNameGenerator&lt;/code&gt; API before the 5.4 release.  Basically it would allow JUnit to determine a nice display name for your classes and tests from your class and method names without having to add the &lt;code&gt;@DisplayName&lt;/code&gt; annotation.  Seemed like the best of both worlds to me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the &lt;a href=&quot;https://twitter.com/junitteam/status/1093621376978747393&quot;&gt;5.4 release announcement was made on twitter&lt;/a&gt; I setup a quick project and dived right in, but there was one big problem.  The only &lt;code&gt;@DisplayNameGenerator&lt;/code&gt; provided in release 5.4 is a &lt;a href=&quot;https://junit.org/junit5/docs/5.4.0/api/org/junit/jupiter/api/DisplayNameGenerator.ReplaceUnderscores.html&quot;&gt;ReplaceUnderscores&lt;/a&gt; Generator which as you can imagine replaces the underscores in your class and method names with a space.  For example, the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)
public class Password_Reset_Tests {
    @Test
    public void test_When_An_Update_Password_Request_Is_Submitted_The_Two_Passwords_Must_Match{} {
      // test goes here
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Will output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;+-- Password Reset Test
	+-- test When An Update Password Request Is Submitted The Two Passwords Must Match&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All well and good if you use underscores in your class and method names.  I tend to be more of a camel case kind of guy.  Underscores never really did it for me so this wasn&amp;#8217;t going to work out of the box.  The nice thing here is that the JUnit team give a &lt;a href=&quot;https://junit.org/junit5/docs/5.4.0/user-guide/index.html#writing-tests-display-name-generator&quot;&gt;really good example&lt;/a&gt; of implementing a new &lt;code&gt;DisplayNameGenerator&lt;/code&gt; so I borrowed the code from their user guide and has a play with a new camel case generator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of the code discussed here can be found in &lt;a href=&quot;https://github.com/leeturner/junit5-camel-case-emoji-display-name-generator&quot;&gt;this github repo&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a_camel_case_displaynamegenerator&quot;&gt;A Camel Case @DisplayNameGenerator&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the face of it putting a space before every capital letter in a class or method name isn&amp;#8217;t that hard.  It can all be achieved with a simple &lt;code&gt;replaceAll&lt;/code&gt; regex.  Something like this which extends the &lt;code&gt;DisplayNameGenerator.Standard&lt;/code&gt; built into JUnit 5.4:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;static class ReplaceCamelCase extends DisplayNameGenerator.Standard {
    public ReplaceCamelCase() {
    }

    public String generateDisplayNameForClass(Class&amp;lt;?&amp;gt; testClass) {
        return this.replaceCapitals(super.generateDisplayNameForClass(testClass));
    }

    public String generateDisplayNameForNestedClass(Class&amp;lt;?&amp;gt; nestedClass) {
        return this.replaceCapitals(super.generateDisplayNameForNestedClass(nestedClass));
    }

    public String generateDisplayNameForMethod(Class&amp;lt;?&amp;gt; testClass, Method testMethod) {
        return this.replaceCapitals(testMethod.getName());
    }

    private String replaceCapitals(String name) {
        name = name.replaceAll(&quot;([A-Z])&quot;, &quot; $1&quot;);
        return name;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This works for the most part but you very quickly see the benefit of having a single character that you need to replace like in the &lt;code&gt;ReplaceUnderscores&lt;/code&gt;.  For example, the above implementation doesn&amp;#8217;t take into account numbers and will fail to put a space where you would expect one.  For example, this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
void ifItIsDivisibleBy4ButNotBy100() {
	/// test goes here
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Would render:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;+-- if It Is Divisible By4 But Not By100&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not particularly ideal.  We also need to cater for numbers and not just individual numbers, we have to look for sequences of numbers and assume they are intended to be together.  Simple enough with another regex:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;static class ReplaceCamelCase extends DisplayNameGenerator.Standard {
    public ReplaceCamelCase() {
    }

    public String generateDisplayNameForClass(Class&amp;lt;?&amp;gt; testClass) {
        return this.replaceCapitals(super.generateDisplayNameForClass(testClass));
    }

    public String generateDisplayNameForNestedClass(Class&amp;lt;?&amp;gt; nestedClass) {
        return this.replaceCapitals(super.generateDisplayNameForNestedClass(nestedClass));
    }

    public String generateDisplayNameForMethod(Class&amp;lt;?&amp;gt; testClass, Method testMethod) {
        return this.replaceCapitals(testMethod.getName());
    }

    private String replaceCapitals(String name) {
        name = name.replaceAll(&quot;([A-Z])&quot;, &quot; $1&quot;);
        name = name.replaceAll(&quot;([0-9].)&quot;, &quot; $1&quot;);
        return name;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All in all this simple camel case &lt;code&gt;DisplayNameGenerator&lt;/code&gt; works pretty well and generates something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/blog/2019/02/junit5-ReplaceCamelCase.png&quot; alt=&quot;Replace Camel Case Junit 5 Display Name Generator&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will be playing around with this further to see if there are any other scenarios It doesn&amp;#8217;t cater for and updating accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;one_step_too_far&quot;&gt;One Step Too Far&amp;#8230;&amp;#8203;&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am going to leave this here for posterity&amp;#8217;s sake.  I am not proud of it but once I thought of it I couldn&amp;#8217;t help myself :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the new things JUnit 5 allows is &lt;a href=&quot;https://twitter.com/sam_brannen/status/660595585288970240?lang=en&quot;&gt;emoji in your test names&lt;/a&gt;.  This also applies to the &lt;code&gt;@DisplayName&lt;/code&gt; annotation.  All I will say is that it doesn&amp;#8217;t take a great leap to extend the &lt;code&gt;ReplaceUnderscores&lt;/code&gt; or &lt;code&gt;ReplaceCamelCase&lt;/code&gt; Generators with one that replaces certain words with emoji.  Here is a little proof of concept using the example from the JUnit user guide:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;static class ReplaceCamelCaseEmojis extends ReplaceCamelCase {
    public ReplaceCamelCaseEmojis() {
    }

    public String generateDisplayNameForClass(Class&amp;lt;?&amp;gt; testClass) {
        return this.replaceWithEmojis(super.generateDisplayNameForClass(testClass));
    }

    public String generateDisplayNameForNestedClass(Class&amp;lt;?&amp;gt; nestedClass) {
        return this.replaceWithEmojis(super.generateDisplayNameForNestedClass(nestedClass));
    }

    public String generateDisplayNameForMethod(Class&amp;lt;?&amp;gt; testClass, Method testMethod) {
        return this.replaceWithEmojis(super.generateDisplayNameForMethod(testClass, testMethod));
    }

    private String replaceWithEmojis(String name) {
        name = name.replaceAll(&quot;Camel|camel&quot;, &quot;\uD83D\uDC2B&quot;);
        name = name.replaceAll(&quot;Case|case&quot;, &quot;\uD83D\uDCBC&quot;);
        name = name.replaceAll(&quot;Display|display&quot;, &quot;\uD83D\uDCBB&quot;);
        name = name.replaceAll(&quot;Divisible|divisible&quot;, &quot;\u2797&quot;);
        name = name.replaceAll(&quot;Year|year&quot;, &quot;\uD83D\uDCC5&quot;);
        name = name.replaceAll(&quot;100&quot;, &quot;\uD83D\uDCAF&quot;);
        return name;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This generates something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/blog/2019/02/junit5-ReplaceCamelCaseEmoji.png&quot; alt=&quot;Replace Camel Case Junit 5 Display Name Generator&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are very welcome :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Tooling Up - Implementing test &amp;amp;&amp;amp; commit || revert (TCR) In IntelliJ</title>
      <link>http://leeturner.me/blog/2019/01/tooling-up-tcr-intellij.html</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2019/01/tooling-up-tcr-intellij.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like many others, I have been reading about the new programming workflow introduced by &lt;a href=&quot;https://twitter.com/KentBeck&quot;&gt;Kent Beck&lt;/a&gt; called &lt;a href=&quot;https://medium.com/@kentbeck_7670/test-commit-revert-870bbd756864&quot;&gt;test &amp;amp;&amp;amp; commit || revert&lt;/a&gt; (TCR)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I first heard about it I had much the same response as Kent - why the hell would you want to do something like that?  That can&amp;#8217;t possibly work, my tests don&amp;#8217;t always pass when I am experimenting - I would lose my code if I did this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;so_what_is_test_commit_revert_anyway&quot;&gt;So what is test &amp;amp;&amp;amp; commit || revert anyway?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The concept is extremely simple.  When your tests run successfully your code is committed, if your tests fail for any reason, your code is automatically reverted back to the state where the tests last passed.  Yes, this means that you can (and probably will) lose code - especially in the beginning when you are still playing around with this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The easiest way to get your head around it is to watch it in action.  Take a look at this video by Kent Beck &lt;a href=&quot;https://www.youtube.com/watch?v=ZrHBVTCbcE0&quot;&gt;demonstrating TCR&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, what&amp;#8217;s the point ?  The idea is to make everything smaller - the amount of code you write between green test runs, your iterations around the test/dev/commit cycle and bigger problems broken down into smaller parts.  Of course, writing tests is a given here because it is what the whole workflow is based on but they don&amp;#8217;t always have to come first.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the TCR implementations I have seen so far have been like in the video linked above, a single file implementation where the tests and the code are in the same file.  The problem I had is that I don&amp;#8217;t work like that.  I am a Java developer so most of my projects are based on Maven where the &apos;code&apos; and the tests are kept in separate directories.  I also use IntelliJ as my main IDE so I wanted something that worked in that environment and not have to use a different editor and/or keep switching to the commandline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the flip side I didn&amp;#8217;t want to invest too much time in tooling up while I was still only playing with the workflow.  I effectively wanted as little as I could get away with so I could get up and running.  I then found another video by Kent Beck where he walks you through his &lt;a href=&quot;https://www.youtube.com/watch?v=IIKndRX5qHw&quot;&gt;minimal TCR setup in VS Code&lt;/a&gt;.  That video ultimately gave me all I needed to set this up in IntelliJ.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;my_minimal_tcr_implementation_in_intellij&quot;&gt;My minimal TCR implementation in IntelliJ&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step was to find a way to get feedback on the success or failure of a test run.  As I said above, most of my day to day coding is done using Java and maven.  I can easily run my test suite using mavan on the command line so this is where I started looking first.  Well, it turns out that the maven command line (mvn) returns different status codes based on the success or failure of your tests.  This means I can run &lt;em&gt;mvn test&lt;/em&gt; on a project where the tests all pass and see the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[INFO] Tests run: 42, Failures: 0, Errors: 0, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.509 s
[INFO] Finished at: 2019-01-17T21:54:57Z
[INFO] Final Memory: 11M/309M
[INFO] ------------------------------------------------------------------------
&amp;gt;  night-fever git:(master) echo $?
0&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And on a project where there are failing tests and see this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[ERROR] Tests run: 42, Failures: 1, Errors: 0, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.085 s
[INFO] Finished at: 2019-01-17T22:03:32Z
[INFO] Final Memory: 11M/309M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.0:test (default-test) on project nightfever: There are test failures.

&amp;gt;  night-fever git:(master) echo $?
1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means I can now use that status code to chain together a command much like the one Kent Beck uses in his VS Code video:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;mvn test &amp;amp;&amp;amp; git commit -am working || git reset --hard&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OK, good start, I now have a command line TCR implementation working with maven.  Next step, how do I execute this from within IntelliJ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My first try at this was to setup an &lt;em&gt;external tool&lt;/em&gt; within IntelliJ.  This wasn&amp;#8217;t as easy as it sounds due to IntelliJ only accepting one command along with parameters.  There was also no way to chain multiple external tools together.  After a little bit of Googling I found an IntelliJ support article that talked about calling bash directly and passing the commands you want to call as a parameter.  The external tool edit window looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/blog/2019/01/intellij-external-tool-edit.png&quot; alt=&quot;IntelliJ External Tool Edit Screen&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This worked pretty well, as you can see from the screen shot you can even set it to synchronise the files after execution of the tool so IntelliJ picks up any reverts that might have happened.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That in and of itself would probably be enough for a minimal TCR implementation inside IntelliJ.  However, there are other options along the same theme which might work better for you depending on how you prefer to code.  There is a plugin written by Jet Brains called &lt;a href=&quot;https://www.jetbrains.com/help/idea/using-file-watchers.html&quot;&gt;File Watchers&lt;/a&gt; that allows you to automatically run a command when you change or save a file. This is how I ultimately had this setup:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/blog/2019/01/intellij-file-watcher-edit.png&quot; alt=&quot;IntelliJ File Watcher Edit Screen&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will notice that I un-ticked the option &lt;em&gt;Auto-save edited files to trigger the watcher&lt;/em&gt;.  I turned that off so the File Watcher starts upon save (File | Save All) or when you move the focus from IntelliJ IDEA (on frame deactivation).  The main reason being that I didn&amp;#8217;t want the File Watcher to kick in when I was part way through a change and IntelliJ decided to auto-save the file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what_next&quot;&gt;What Next ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of the above works really well but it obviously has some downsides.  I am effectively running the whole test suite via maven and although this ran pretty fast on my machine with a relatively small project, it would really slow things down when the project grew to any reasonable size.  That would make this solution effectively unusable at that point.  Thankfully IntelliJ was quite quick at syncing with the file system when a revert happened so hopefully that won&amp;#8217;t be a problem moving forwards.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My ultimate solution would be to have this type of functionality integrated with the Run/Debug test runner inside IntelliJ.  I could then use my standard keyboard shortcuts to run individual test methods, a whole test class or a whole test suite and it would trigger the test &amp;amp;&amp;amp; commit || revert workflow based on the results in a much more integrated way.  I imagine this would require a plugin to make this happen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ll be continuing to play with TCR to see how far I can stretch it and whether is it applicable to all types of projects.  That is the topic for another article though.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hello World&amp;#8230;&amp;#8203;. erm again</title>
      <link>http://leeturner.me/blog/2019/01/hello-world-erm-again.html</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2019/01/hello-world-erm-again.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, what can I say?  It has been nearly a year to the day that I posted my original &lt;a href=&quot;/blog/2018/01/hello-world&quot;&gt;Hello World post&lt;/a&gt; and I think it is fair to say that there hasn&amp;#8217;t been a great deal of activity since.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That isn&amp;#8217;t to say that it hasn&amp;#8217;t been an extremely busy 2018.  I just completely failed to write about any of it which is a shame.  2018 was filled with some pretty cool stuff:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Promotions at work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building some cool microservices with Spring Boot 2x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Taking a deep dive into Spring Security&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Playing around with the new features in Junit5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Presenting a number of tech talks (Junit5, Mutation Testing and Fn Project) to the engineering team at work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building a few Raspberry Pi projects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building a prototype chatbot&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dabbling in a little machine learning&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of the above would have generated some great content.  On top of all of that there are still a load of projects that I didn&amp;#8217;t get round to starting.  Lots to do in 2019.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, I don&amp;#8217;t do New Years resolutions, but I am committing to writing more about what I am up to - for no other reason than so I have a reference in January 2020 to look back on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is to a busy 2019 :)&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Oracle MOOC: Java Virtual Machine Troubleshooting (2018)</title>
      <link>http://leeturner.me/blog/2018/02/oracle-mooc-java-virtual-machine-troubleshooting.html</link>
      <pubDate>Sun, 25 Feb 2018 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2018/02/oracle-mooc-java-virtual-machine-troubleshooting.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Its been a while since I have completed one of the Oracle MOOC (Massive Open Online Courses).  This one on troubleshooting the JVM and OutOfMemoryErrors was particularly good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/blog/2018/02/completion-award-for-oracle-mooc-java-virtual-machine-troubleshooting-2018.png&quot; alt=&quot;JVM Troubleshooting Orcale MOOC&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Oracle MOOC was run by Poonam Parhar, currently a JVM Sustaining Engineer at Oracle where her primary responsibility is to resolve customer escalated problems against JRockit and HotSpot JVMs&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is the summary from the course:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are interested in learning why our Java applications might exhibit performance problems, abnormal memory usage growth or sometimes even fail with OutOfMemoryError exceptions, and you want to learn how these problems can be diagnosed and eradicated, then this course is for you! This course talks about different memory issues that we may come across with our java applications, and goes in detail on how we should approach these issues, what diagnostic tools we should use to collect the interesting diagnostic data, and what tools can help us analyze that data to get to the bottom of these memory problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This course has three weekly lessons, and in these lessons we will discover various aspects of memory management, garbage collectors implemented in the JVM, and what kind of memory problems we might encounter with our java applications. We will explore various diagnostic and troubleshooting tools that can help us in dealing with the memory related issues.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a quiz at the end of each week where you have to get 70% or more to pass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All in all this course was just at the right level for the amount of time needed to complete it and it gave you a great overview of all the areas of JVM memory management and OutOfMemoryErrors.  I&amp;#8217;ll definitely be diving deeper into some of the areas covered in this course like Flight Recording and heap dump analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would definitely recommend &lt;a href=&quot;https://apexapps.oracle.com/pls/apex/f?p=44785:149:0::::P17_EVENT_ID:5688&quot;&gt;checking out the course&lt;/a&gt; and enrolling when they next run it.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Continuous Feedback With TDD &amp;amp; Auto Running Tests</title>
      <link>http://leeturner.me/blog/2018/02/continuous-feedback-with-tdd.html</link>
      <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2018/02/continuous-feedback-with-tdd.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the first of my &apos;reference&apos; posts which pretty much means I am writing about it here so I don&amp;#8217;t forget about it in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post it about configuring your dev environment to provide you with continuous feedback while writing your code.  All of this came about after a conversation with another developer on my team about how to setup IntelliJ to run tests automatically.  We were looking at plugins such as &lt;a href=&quot;https://infinitest.github.io&quot;&gt;Infinitest&lt;/a&gt; but it all seemed a little clunky and crashed every so often.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The classic &lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd&quot;&gt;3 laws of TDD&lt;/a&gt; are pretty well known:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Write production code only to make a failing unit test pass.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write only enough of a unit test to fail.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write only enough production code to make the failing unit test pass.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, in all of the above, it is implicit that you are running your tests regularly enough to get feedback on the different stages.  Don&amp;#8217;t get me wrong, this is easy enough in IntelliJ, with a quick keyboard command but I was interested to see if there was a different way of working.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I went home that evening and dug a little deeper.  I eventually came across a feature of IntelliJ that I am amazed that I haven&amp;#8217;t seen before and it fit the bill nicely.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;enter_toggle_auto_test&quot;&gt;Enter &apos;Toggle Auto-Test&apos;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Toggle auto-test basically runs your test suite for you when it recognised a change in your code.  This is exactly what we were looking for and it was there in IntelliJ all this time.  Toggle auto-test is one of those little buttons tucked away down the side of the &apos;Run&apos; or &apos;Debug&apos; panels - click this and magical things start to happen :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/blog/2018/02/toggle-auto-test-intellij.png&quot; alt=&quot;Toggle Auto-Test In IntelliJ&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting_up_toggle_auto_test&quot;&gt;Setting Up Toggle Auto-Test&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are just a few small things that you need to do to get this up and running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Firstly you need to make sure you have Intellij setup to automatically build your project.  To do this open up the preferences dialog and search for &apos;Build Project Automatically&apos;.  Once found, tick the option.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then you need to setup and run a test suite.  This can be done via the &apos;Edit Configurations&apos; dialog or simply by running a test or tests via the shortcut keys or project sidebar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you have run the test suite all you then need to do is click the toggle auto-test button and everytime IntelliJ detects a change to your code, it will build your project and execute your test suite.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is important to remember that all this is doing is running the same test suite over and over again so make sure you are executing the right tests or you won&amp;#8217;t get the feedback you are looking for.  At the moment I have all my unit tests running on every change I make.  Unit tests are quick enough to make this easy to do but you might want to be careful about running things like integration tests where they can take longer.  You certainly don&amp;#8217;t want to slow down your development/test cycle by doing this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All in all this has been a positive change to my development cycle and I will be trialing this for a little longer.  It will be interesting to see at what point this becomes impractical based on the number/type of tests run on every change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think one of the reasons I might not have spotted this button before is because unfortunately it isn&amp;#8217;t accessible via keyboard only shortcuts.  I don&amp;#8217;t use the mouse much while developing as it slows me down but the toggle auto-test feature isn&amp;#8217;t accessible via a keyboard shortcut or and Action command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hopefully they will add this in a future release.  I have logged an &lt;a href=&quot;https://youtrack.jetbrains.com/issue/IDEA-186112&quot;&gt;feature improvement&lt;/a&gt; in the IntelliJ tracker so who knows.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Do You Bake Or Fry?</title>
      <link>http://leeturner.me/blog/2018/01/do-you-bake-or-fry.html</link>
      <pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2018/01/do-you-bake-or-fry.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before I go much further, I thought it was probably worth me putting down a few notes about my technology choices for this site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In term of website development, I have had experience of quite a few different content management systems such as &lt;a href=&quot;http://b2evolution.net&quot;&gt;b2Evolution&lt;/a&gt; and more recently &lt;a href=&quot;http://wordpress.org&quot;&gt;Wordpress&lt;/a&gt;.  I have developed plugins and templates for b2Evolution as well as contributing code to the core product back in the day.  I have put more sites together in Wordpress than I care to remember - most of my clients used Wordpress in some form or other while I was working in the paid traffic/SEO industry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Content management systems like b2Evolution and Wordpress have become commonly know as &apos;&lt;em&gt;frying&lt;/em&gt;&apos; your site - all of your content is hidden away in a database somewhere and the CMS code takes a request from a browser, translates that into a request on the database to pull out the content and wrap it up with your chosen theme to produce your site.  There is absolutely nothing wrong with this&amp;#8230;&amp;#8203;. in fact it works very well.  You can get a good looking site up and running very quickly and it is probably going to be able to do everything you need it to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the flip side of &apos;&lt;em&gt;frying&lt;/em&gt;&apos; is &apos;&lt;em&gt;baking&lt;/em&gt;&apos;.  This is where your content is stored in text files using a simple markup like &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; or &lt;a href=&quot;http://asciidoctor.org&quot;&gt;AsciiDoc&lt;/a&gt;.  You run your content through an application that bakes it together with a template to produce a static site.  By static site I mean a pure html based website that can be run from any web server or hard drive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have dabbled with blog aware static site generators since reading an article on &lt;a href=&quot;http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html&quot;&gt;Blogging Like a Hacker&lt;/a&gt; using &lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://octopress.org&quot;&gt;Octopress&lt;/a&gt; to put a few sites together.  The problem I have always had is that I needed the sites to serve a purpose and I didn&amp;#8217;t have the time to devote to understanding everything I needed to know to get the best out of the static site.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why_bake&quot;&gt;Why Bake ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many pro&amp;#8217;s and con&amp;#8217;s to static site generators and they aren&amp;#8217;t suitable for everyone or every use case.  There has been plenty written about the benefits of static sites but the ones that appeal to me the most are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flexibility&lt;/strong&gt; - the content I write is stored in plain text files.  This means I can write it in a &lt;a href=&quot;http://www.vim.org&quot;&gt;text editor&lt;/a&gt; of &lt;a href=&quot;http://sublimetext.com&quot;&gt;my choosing&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt; - the output of running a static site generator is a static site - html, css, javascript etc.  There isn&amp;#8217;t a whole lot you can hack with a static site.  If you have ever had to clean up a hacked Wordpress site you will know that it is no easy job - content inserted into the database, rogue code inserted into the php files, additional files added to your hosting account&amp;#8230;&amp;#8203;. the list goes on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt; - as discussed above, a &apos;&lt;em&gt;frying&lt;/em&gt;&apos; based content management system has multiple resources that it is managing all of which are limited.  There are only a limited number of database requests that the CMS can make at any one time and therefore, if your site is getting a reasonable amount of traffic you will have to consider some kind of caching solution.  A &apos;&lt;em&gt;baked&lt;/em&gt;&apos; site doesn&amp;#8217;t have these limitations&amp;#8230;&amp;#8203;.. it is just a static site which can be cached by your browsers standard browser cache.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reliability&lt;/strong&gt; - Similar to the performance point above, with all the moving parts of a a &apos;&lt;em&gt;frying&lt;/em&gt;&apos; based CMS there are so many things that can go wrong - problems connecting to the database, issues with conflicting plugins, problems when upgrading the CMS or the plugins.  Static sites have none of these problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Version Control&lt;/strong&gt; - even though some content management systems try to provide some level of version control for your content, that content is still stored in a database which is inherently harder to version control in its entirety.  With a static site you can store all of your content in a version control system such as git, which not only provides you with first class version control but serves as an effective backup as well.  It makes sense that developers who use these tools on a daily basis are drawn to static sites.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why_bake_now&quot;&gt;Why Bake Now ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So I guess the question has to be why am I now choosing to put this site together using static site generation instead of a standard CMS that I am more familiar with?  I think the main difference this time round is that for me, the website is a project in and of itself, which was never the case before.  I plan to use it to learn a few things I have had on my radar for a little while and also to get involved in an open source project or two.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This site will be the perfect outlet for all of those things and doesn&amp;#8217;t have to serve any other purpose than for me to document what I am playing with.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what_do_you_bake_with&quot;&gt;What Do You Bake With ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This leaves just one thing to discuss.  What am I going to use to generate this site?  There are many more static site generators available now than when I first played with Jekyl and Octopress.  You only have to look at &lt;a href=&quot;https://www.staticgen.com&quot;&gt;StaticGen&lt;/a&gt; to see that Jekyll is still the granddaddy of them all, but there are now others out there that are gaining traction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I am primarily a Java developer I was looking for a good solid open source static site generator written in Java so I could get involved in driving the project forward.  There are a few Java based site generators out there but by far the most complete is &lt;a href=&quot;http://www.jbake.org&quot;&gt;jBake&lt;/a&gt;.  This is the tool I have chosen to build my site with.  This site isn&amp;#8217;t yet up and running, even as I type this post.  This is mostly due to the fact that I am looking into converting a new template to use with my site (more on this in future posts), but I am playing around with it as I type so hopefully I will have something up and running soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jbake is by no means perfect.  One of the big things it is missing is a plugin system which would allow people to extend the functionality of jBake while the site is being baked.  I am hoping that this is something that will be worked on soon and something I am looking forward to getting involved with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So that is it.  This post lays the foundation of what I am using to build the site and I am sure there will be many more related posts as I dig deeper and get more involved in the project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Hello World</title>
      <link>http://leeturner.me/blog/2018/01/hello-world.html</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2018/01/hello-world.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, it has been quite a while since I&amp;#8217;ve had a personal site up and running but given I am back in the dev world full-time, now seemed like a good time to kick one off again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the moment I have no idea where this site is going to go but at the very least it will be a place for me to document what I am working on and the things I am playing around with - more for my reference than anything else but hopefully there might be some use for others as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will very much be targeted towards my primary developer stack so things like Java, Spring, Spring Boot, J2EE and maybe a bit of mobile dev thrown in for good measure.  All with a little sprinkling of TDD, BDD, Agile and Scrum.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Welcome along for the ride :)&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
